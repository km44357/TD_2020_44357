

#include "pch.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

double pi = 3.14159265359;

/*
	double fx = double(7 * pow(t, 2) + 5 * t + 3);
	double fy = double(2 * pow(fx,2) + 12 * cos(t));
	double fz = double(sin(2 * pi * 7 * t) * fx - 0.2 * log10(abs(fy) + pi));
	double fu = double(sqrt(abs(fy * fy * fz)) - 1.8 * sin(0.4 * t * fz * fx));
	double fv1 = double((1 - 7 * t) * sin((2 * pi * t * 10)/(t + 0.04)));
	double fv2 = double(0.63 * t * sin(125 * t));
	double fv3 = double(pow(t, -0.662) + 0.77 * sin(8 * t));
	int i = 0;
	double fp = double((cos(12 * t * pow(i, 2)) + cos(16 * t * i)) / pow(i, 2));
*/

class DFT
{
	public:

	struct cx{
		double real;
		double imag;
	};
		double dts;

		vector<cx> SRC;
		vector<cx> X;
		vector<cx> IX;

		vector<double> M;
		vector<double> Mp;

		void make_SRC1();
		void make_SRC2();
		void make_SRC3();
		void make_SRC4();
		void make_SRC5();
		void make_SRC6();

		void calc_DFT();
		void calc_WA();
		void calc_IDFT();

		void TEST();
};

void DFT::make_SRC1()
{
	int A = 1;
	int f = 5;
	
	double si = 3 * pi;

	this->dts = 1.0/4.0 ;
	double dk = 3*5*7 / dts;

	double t = 0;

	vector <double> temp;
	
	SRC.clear();

	double x;

	double y;

	ofstream outfile;
	outfile.open("data1.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		t = i * dts;

		x = double(A * sin(2 * pi*f*t + si));

		outfile << (double)x << "\n";

		SRC.push_back({ x, 0 });
		
	}

	outfile.close();

	ofstream outfile2;
	outfile2.open("time1.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;		
		outfile2 << (double)t << "\n";		
	}

	outfile2.close();
}

void DFT::make_SRC2()
{
	int A = 1;
	int f = 5;

	double si = 3 * pi;
	
	this->dts = 1.0 / 2050;
	double dk = 1 / dts;

	double t = 0;

	vector <double> temp;

	SRC.clear();

	double x;

	ofstream outfile2;
	outfile2.open("data2.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		double fx = double(7 * pow(t, 2) + 5 * t + 3);
		double fy = double(2 * pow(fx, 2) + 12 * cos(t));

		t = i * dts;

		x = fy;		

		outfile2 << (double)x << "\n";		

		SRC.push_back({ x, 0 });
	}

	outfile2.close();


	ofstream outfile3;
	outfile3.open("time2.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;
		outfile3 << (double)t << "\n";
	}

	outfile3.close();
	
}

void DFT::make_SRC3()
{
	int A = 1;
	int f = 5;

	double si = 3 * pi;
	
	this->dts = 1.0 / 2050;
	double dk = 1 / dts;

	double t = 0;

	vector <double> temp;

	SRC.clear();

	double x;

	double y;

	ofstream outfile3;
	outfile3.open("data3.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		double fx = double(7 * pow(t, 2) + 5 * t + 3);
		double fy = double(2 * pow(fx, 2) + 12 * cos(t));
		double fz = double(sin(2 * pi * 7 * t) * fx - 0.2 * log10(abs(fy) + pi));

		t = i * dts;

		x = fz;

		outfile3 << (double)x << "\n";


		SRC.push_back({ x, 0 });
	}

	outfile3.close();

	ofstream outfile4;
	outfile4.open("time3.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;
		outfile4 << (double)t << "\n";
	}

	outfile4.close();

}

void DFT::make_SRC4()
{
	int A = 1;
	int f = 5;

	double si = 3 * pi;

	this->dts = 1.0 / 2050;
	double dk = 1 / dts;

	double t = 0;

	vector <double> temp;

	SRC.clear();

	double x;

	double y;

	ofstream outfile3;
	outfile3.open("data3.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		double fx = double(7 * pow(t, 2) + 5 * t + 3);
		double fy = double(2 * pow(fx, 2) + 12 * cos(t));
		double fz = double(sin(2 * pi * 7 * t) * fx - 0.2 * log10(abs(fy) + pi));
		double fu = double(sqrt(abs(fy * fy * fz)) - 1.8 * sin(0.4 * t * fz * fx));

		t = i * dts;

		x = fu;

		outfile3 << (double)x << "\n";

		SRC.push_back({ x, 0 });
	}

	outfile3.close();

	ofstream outfile4;
	outfile4.open("time3.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;
		outfile4 << (double)t << "\n";
	}

	outfile4.close();
}

void DFT::make_SRC5()
{
	int A = 1;
	int f = 5;

	double si = 3 * pi;

	this->dts = 1.0 / 2050;
	double dk = 1 / dts;

	double t = 0;

	vector <double> temp;

	SRC.clear();

	double x;

	double y;

	ofstream outfile3;
	outfile3.open("data3.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		double fx = double(7 * pow(t, 2) + 5 * t + 3);
		double fy = double(2 * pow(fx, 2) + 12 * cos(t));
		double fz = double(sin(2 * pi * 7 * t) * fx - 0.2 * log10(abs(fy) + pi));
		double fu = double(sqrt(abs(fy * fy * fz)) - 1.8 * sin(0.4 * t * fz * fx));
						
		t = i * dts;

		if ( 0<=t && t < 0.22) {
			double fv1 = double((1 - 7 * t) * sin((2 * pi * t * 10) / (t + 0.04)));
			x = fv1;
		}
		if (0.22 <= t && t < 0.7) {
			double fv2 = double(0.63 * t * sin(125 * t));
			x = fv2;
		}
		if (0.7 <= t && t <= 1.0) {
			double fv3 = double(pow(t, -0.662) + 0.77 * sin(8 * t));
			x = fv3;
		}

		outfile3 << (double)x << "\n";		

		SRC.push_back({ x, 0 });
	}

	outfile3.close();

	ofstream outfile4;
	outfile4.open("time3.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;
		outfile4 << (double)t << "\n";
	}

	outfile4.close();
}

void DFT::make_SRC6()
{
	int A = 1;
	int f = 5;

	double si = 3 * pi;

	this->dts = 1.0 / 2050;
	double dk = 1 / dts;

	double t = 0;

	vector <double> temp;

	SRC.clear();

	double x = 0;

	double y;

	ofstream outfile3;
	outfile3.open("data3.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {
		
		t = i * dts;
		
		int j = 2;
		double fp = double((cos(12 * t * pow(j, 2)) + cos(16 * t * j)) / pow(j, 2));
		x = x + fp;

		j = 4;
		fp = double((cos(12 * t * pow(j, 2)) + cos(16 * t * j)) / pow(j, 2));
		x = x + fp;

		j = 75;
		fp = double((cos(12 * t * pow(j, 2)) + cos(16 * t * j)) / pow(j, 2));
		x = x + fp;
		
		outfile3 << (double)x << "\n";
		

		SRC.push_back({ x, 0 });

	}

	outfile3.close();

	ofstream outfile4;
	outfile4.open("time3.txt", ios::trunc | ios::out);
	t = 0;
	for (int i = 0; i < dk; i++) {

		t = i * dts;
		outfile4 << (double)t << "\n";
	}

	outfile4.close();
}

void DFT::calc_DFT()
{
	X.clear();
	

	int n = SRC.size();

	double re, im;

	for (int i = 0; i < n; i++) {

		re = 0;
		im = 0;
		for (int j = 0; j < n; j++)
		{

			re += SRC[j].real * (cos((2 * pi / n) * i * j)) + SRC[j].imag * (sin((2 * pi / n) * i * j));

			im += SRC[j].real * (-sin((2 * pi / n) * i * j)) + SRC[j].imag * (cos((2 * pi / n) * i * j));

		}

		X.push_back({ re, im });
		
	}
}

void DFT::calc_WA() {

	double m, mp;

	int n = X.size();

	ofstream outfile1;
	outfile1.open("dataM.txt", ios::trunc | ios::out);
	
	for (int i = 0; i < n; i++) {

		m = sqrt(pow(X[i].real, 2) + pow(X[i].imag, 2));
		mp = 10 * log10(m);

		outfile1 << (double)mp << "\n";

		//M.push_back(m);
		//Mp.push_back(mp);
	}

	outfile1.close();

	ofstream outfile2;
	outfile2.open("freqM.txt", ios::trunc | ios::out);

	double fk;
	double fsn = (1/dts) / (double)n;

	for (int k = 0; k < n; k++) {

		 fk = double( k * fsn);

		outfile2 << (double)fk << "\n";

		
	}

	outfile2.close();

}

void DFT::calc_IDFT()
{
	IX.clear();


	int n = X.size();

	double re, im;

	for (int i = 0; i < n; i++) {

		re = 0;
		im = 0;
		for (int j = 0; j < n; j++)
		{

			re += X[j].real * (cos((2 * pi / n) * j * i)) - X[j].imag * (sin((2 * pi / n) * j * i));

			im += X[j].real * (sin((2 * pi / n) * j * i)) + X[j].imag * (cos((2 * pi / n) * j * i));
		}
		re /= n;
		im /= n;

		IX.push_back({ re, im });

	}
}

void DFT::TEST() {

	int n = X.size();
	double sum1, sum2;

	for (int i = 0; i < n; i++) {

		cout << SRC[i].real << "  " << SRC[i].imag << "  " << IX[i].real << "  " << IX[i].imag << endl;

	}

}

int main() 
{

	DFT dane;

	//dane.make_SRC1();
	//dane.calc_DFT();
	//dane.calc_WA();

	//dane.calc_IDFT();

	//dane.TEST();

	DFT dane2;
	//dane2.make_SRC2();
	//dane2.calc_DFT();
	//dane2.calc_WA();

	DFT dane3;
	//dane3.make_SRC3();
	//dane3.calc_DFT();
	//dane3.calc_WA();

	DFT dane4;
	//dane4.make_SRC4();
	//dane4.calc_DFT();
	//dane4.calc_WA();

	DFT dane5;
	//dane5.make_SRC5();
	//dane5.calc_DFT();
	//dane5.calc_WA();

	DFT dane6;
	dane6.make_SRC6();
	dane6.calc_DFT();
	dane6.calc_WA();

	return 0;
}
