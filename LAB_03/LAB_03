

#include "pch.h"
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

double pi = 3.14159265359;

class DFT
{
	public:

	vector <double> src_r;
	vector <double> src_i;
	vector <double> dft_r;
	vector <double> dft_i;
	
	
		void sig1();
		//void make_src2();

		void dft();
		void va();
};

void DFT::sig1()
{
	int A = 1;
	int f = 5;
	
	double th = 3 * pi;
	double dts = 1.0 / 50;

	double t;

	vector <double> temp;
	
	src_r.clear();
	src_i.clear();

	

	double x;

	for (int i = 0; i < 5250; i++)
	{
		t = i * dts;

		x = double(A * sin(2 * pi*f*t + th)) + 1;
		temp.push_back(x);
		
	}

	double y;

	for (int i = 0; i < 5250; i++) {
		y = floor(temp[i] * pow(2, 8));

		src_r.push_back(y);
		src_i.push_back(0);
	}
}

void DFT::dft()
{
	dft_r.clear();
	dft_i.clear();

	int n = src_r.size();
	
	double re, im;


	for (int i = 0; i < n; i++) {
		
		re = 0;
		im = 0;
		for (int j = 0; j < n; j++)
		{

				re += src_r[j] * (cos((2 * pi / n) * i * j)) + src_i[j] * (sin((2 * pi / n) * i * j));
			
				im += src_r[j] * (-sin((2 * pi / n) * i * j)) + src_i[j] * (cos((2 * pi / n) * i * j));

		}
			dft_r.push_back(re);
			dft_i.push_back(im);
			

}

int main() 
{

	DFT dane1;

	dane1.sig1();
	dane1.dft();
	
	return 0;
}
