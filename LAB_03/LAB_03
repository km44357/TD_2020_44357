

#include "pch.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

double pi = 3.14159265359;
double dts = 1.0;


class DFT
{
	public:

	struct cx{
		double real;
		double imag;
	};
	
		vector<cx> SRC;
		vector<cx> X;
		vector<cx> IX;

		vector<double> M;
		vector<double> Mp;

		void make_SRC1();
		//void make_src2();

		void calc_DFT();
		void calc_WA();
		void calc_IDFT();

		void TEST();
};

void DFT::make_SRC1()
{
	int A = 1;
	int f = 5;
	
	double si = 3 * pi;
	//double dts = 1.0 / 50;
	//double dts = 1.0;

	double dk = 3 * 5 * 7 / dts;

	double t;

	vector <double> temp;
	
	SRC.clear();

	double x;

	double y;

	ofstream outfile;
	outfile.open("data.txt", ios::trunc | ios::out);

	for (int i = 0; i < dk; i++) {

		t = i * dts;

		x = double(A * sin(2 * pi*f*t + si));
		//y = floor(x * pow(2, 8));

		outfile << (double)x << "\n";
		//cout << x << endl;

		SRC.push_back({ x, 0 });
		
	}

	outfile.close();
}

void DFT::calc_DFT()
{
	X.clear();
	

	int n = SRC.size();

	double re, im;

	for (int i = 0; i < n; i++) {

		re = 0;
		im = 0;
		for (int j = 0; j < n; j++)
		{

			re += SRC[j].real * (cos((2 * pi / n) * i * j)) + SRC[j].imag * (sin((2 * pi / n) * i * j));

			im += SRC[j].real * (-sin((2 * pi / n) * i * j)) + SRC[j].imag * (cos((2 * pi / n) * i * j));

		}

		X.push_back({ re, im });
		
	}
}

void DFT::calc_WA() {

	double m, mp;

	int n = X.size();

	ofstream outfile1;
	outfile1.open("dataM.txt", ios::trunc | ios::out);
	
	for (int i = 0; i < n; i++) {

		m = sqrt(pow(X[i].real, 2) + pow(X[i].imag, 2));
		mp = 10 * log10(m);

		outfile1 << (double)mp << "\n";

		//M.push_back(m);
		Mp.push_back(mp);
	}

	outfile1.close();

	ofstream outfile2;
	outfile2.open("freqM.txt", ios::trunc | ios::out);

	double fk;
	double fsn = dts / (double)n;

	for (int k = 0; k < n; k++) {

		 fk = double( k * fsn);

		outfile2 << (double)fk << "\n";

		
	}

	outfile2.close();

}

void DFT::calc_IDFT()
{
	IX.clear();


	int n = X.size();

	double re, im;

	for (int i = 0; i < n; i++) {

		re = 0;
		im = 0;
		for (int j = 0; j < n; j++)
		{

			re += X[j].real * (cos((2 * pi / n) * j * i)) - X[j].imag * (sin((2 * pi / n) * j * i));

			im += X[j].real * (sin((2 * pi / n) * j * i)) + X[j].imag * (cos((2 * pi / n) * j * i));
		}
		re /= n;
		im /= n;

		IX.push_back({ re, im });

	}
}

void DFT::TEST() {

	int n = X.size();
	double sum1, sum2;

	for (int i = 0; i < n; i++) {

		cout << SRC[i].real << "  " << SRC[i].imag << "  " << IX[i].real << "  " << IX[i].imag << endl;

	}

}


int main() 
{

	DFT dane;

	dane.make_SRC1();
	dane.calc_DFT();
	dane.calc_WA();

	dane.calc_IDFT();

	dane.TEST();

	return 0;
}
